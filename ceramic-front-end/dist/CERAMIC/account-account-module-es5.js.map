{"version":3,"sources":["webpack:///src/app/account/account-routing.module.ts","webpack:///src/app/account/account.module.ts","webpack:///src/app/account/auth/auth-routing.ts","webpack:///src/app/account/auth/auth.module.ts","webpack:///src/app/account/auth/login/login.component.ts","webpack:///src/app/account/auth/login/login.component.html"],"names":["routes","path","loadChildren","then","m","AuthModule","AccountRoutingModule","forChild","imports","exports","AccountModule","declarations","component","AuthRoutingModule","LoginComponent","formBuilder","route","router","authFackservice","http","baseUrl","submitted","incorrect","msgErr","error","year","Date","getFullYear","get","subscribe","data","mdp","console","document","body","removeAttribute","classList","add","loginForm","group","password","required","returnUrl","snapshot","queryParams","controls","log","f","value","invalid","login","pipe","navigate","onSubmit","selector","templateUrl","styleUrls"],"mappings":"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","file":"account-account-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n  { path: 'auth', loadChildren: () => import('./auth/auth.module').then(m => m.AuthModule) },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class AccountRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AccountRoutingModule } from './account-routing.module';\nimport { AuthModule } from './auth/auth.module';\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    AccountRoutingModule,\n    AuthModule\n  ]\n})\nexport class AccountModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginComponent } from './login/login.component';\n// import { SignupComponent } from './signup/signup.component';\n// import { PasswordresetComponent } from './passwordreset/passwordreset.component';\n\nconst routes: Routes = [\n    {\n        path: 'login',\n        component: LoginComponent\n    },\n    // {\n    //     path: 'signup',\n    //     component: SignupComponent\n    // },\n    // {\n    //     path: 'reset-password',\n    //     component: PasswordresetComponent\n    // },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AuthRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { UiModule } from '../../shared/ui/ui.module';\nimport { AuthRoutingModule } from './auth-routing';\n\nimport { LoginComponent } from './login/login.component';\n// import { SignupComponent } from './signup/signup.component';\n// import { PasswordresetComponent } from './passwordreset/passwordreset.component';\n// import { FormModule } from 'src/app/pages/form/form.module';\n\n@NgModule({\n  declarations: [LoginComponent],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    NgbAlertModule,\n    UiModule,\n    AuthRoutingModule\n  ]\n})\nexport class AuthModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { AuthenticationService } from '../../../core/services/auth.service';\nimport { AuthfakeauthenticationService } from '../../../core/services/authfake.service';\n\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { first } from 'rxjs/operators';\n\nimport { environment } from '../../../../environments/environment';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  loginForm: FormGroup;\n  private baseUrl = 'http://localhost:3000';\n  submitted = false;\n  public incorrect = false;\n  public msgErr = '';\n  error = '';\n  returnUrl: string;\n  mdp:any;\n\n  // set the currenr year\n  year: number = new Date().getFullYear();\n\n  // tslint:disable-next-line: max-line-length\n  constructor(private formBuilder: FormBuilder, private route: ActivatedRoute, private router: Router, public authFackservice: AuthfakeauthenticationService, public http: HttpClient) { \n    this.http.get(this.baseUrl+'/ceramicauth').subscribe(data =>{\n       this.mdp = data\n      //  console.log(this.mdp);\n     }, error=> console.error(error));\n  }\n\n  ngOnInit() {\n    document.body.removeAttribute('data-layout');\n    document.body.classList.add('auth-body-bg');\n\n    this.loginForm = this.formBuilder.group({\n      // email: ['', [Validators.required, Validators.email]],\n      password: ['', [Validators.required]],\n    });\n\n    // reset login status\n    // this.authenticationService.logout();\n    // get return url from route parameters or default to '/'\n    // tslint:disable-next-line: no-string-literal\n    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.loginForm.controls; }\n\n  /**\n   * Form submit\n   */\n  onSubmit() {\n    this.submitted = true;\nconsole.log(this.f.password.value);\n\n    // stop here if form is invalid\n    if (this.loginForm.invalid) {\n      return;\n    } else {\n      if (this.f.password.value != this.mdp) {\n        this.incorrect=true;\n        this.msgErr = 'Mot de passe incorrect !'\n    //     console.log(\"Connection...\")\n    //       return true;\n       \n      }else{\n        this.incorrect = false\n        this.msgErr = 'Connection en cours ...'\n        \n        console.log(this.incorrect);\n        this.authFackservice.login().pipe(first()).subscribe(\n          data => {\n            this.router.navigate(['/']);\n          }\n        )\n          \n      }\n      // console.log(this.mdp);\n      console.log(this.msgErr+ ' ' +this.incorrect);\n      \n    // else{console.log(\"echec de la connection\"); return false\n    // }\n    // } \n\n    // if(this.onSubmit() === true){\n    //   this.router.navigate(['/']);\n    }\n    // else {\n    //     this.authFackservice.login(this.f.email.value)\n    //       .pipe(first())\n    //       .subscribe(\n    //         data => {\n    //           this.router.navigate(['/']);\n    //         },\n    //         error => {\n    //           this.error = error ? error : '';\n    //         });\n    //   }\n    // }\n  }\n\n}\n","<div class=\"home-btn d-none d-sm-block\">\n  <a routerLink=\"\"><i class=\"mdi mdi-home-variant h2 text-white\"></i></a>\n</div>\n<div>\n  <div class=\"container-fluid p-0\">\n    <div class=\"row no-gutters\">\n      <div class=\"col-lg-4\">\n        <div class=\"authentication-page-content p-4 d-flex align-items-center min-vh-100\">\n          <div class=\"w-100\">\n            <div class=\"row justify-content-center\">\n              <div class=\"col-lg-9\">\n                <div>\n                  <div class=\"text-center\">\n                    <div>\n                      <a routerLink=\"\" class=\"logo\"><img src=\"assets/images/logo-dark.png\" height=\"20\" alt=\"logo\"></a>\n                    </div>\n\n                    <h4 class=\"font-size-18 mt-4\">Bienvenue !</h4>\n                    <p class=\"text-muted\">Entrer votre mot de passe pour avoir acces au service CERAMIC.</p>\n                  </div>\n\n                  <div class=\"p-2 mt-5\">\n                    <form class=\"form-horizontal\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n                      <ngb-alert type=\"danger\" *ngIf=\"error\" [dismissible]=\"false\">{{ error }}</ngb-alert>\n                      <!-- <div class=\"form-group auth-form-group-custom mb-4\">\n                        <i class=\"ri-user-2-line auti-custom-input-icon\"></i>\n                        <label for=\"email\">Email</label>\n                        <input formControlName=\"email\" class=\"form-control\" id=\"email\" placeholder=\"Email\"\n                          [ngClass]=\"{ 'is-invalid': submitted && f.email.errors }\">\n                        <div *ngIf=\"submitted && f.email.errors\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f.email.errors.required\">Email is required</div>\n                          <div *ngIf=\"f.email.errors.email\">Email must be a valid email address</div>\n                        </div>\n                      </div> -->\n\n                      <div class=\"form-group auth-form-group-custom mt-5 mb-4\">\n                        <i class=\"ri-lock-2-line auti-custom-input-icon\"></i>\n                        <label for=\"password\">Mot de passe</label>\n                        <input type=\"password\" formControlName=\"password\" class=\"form-control\" id=\"password\"\n                          [ngClass]=\"{ 'is-invalid': submitted && f.password.errors }\" placeholder=\"mot de passe\" />\n                        <div *ngIf=\"submitted && f.password.errors\" class=\"invalid-feedback\">\n                          <div *ngIf=\"f.password.errors.required\">Le mot de passe est requis</div>\n                        </div>\n                      </div>\n\n                      <div class=\"mt-3\" *ngIf=\"submitted\">\n                        <div *ngIf=\"!!incorrect\" class=\"alert alert-primary\">\n                          {{msgErr}}\n                        </div><div  class=\"alert alert-primary\" *ngIf=\"!incorrect\">{{msgErr}}</div></div>\n\n                      <!-- <div class=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"customControlInline\">\n                        <label class=\"custom-control-label\" for=\"customControlInline\">Remember me</label>\n                      </div> -->\n\n                      <div class=\"mt-4 text-center\">\n                        <button class=\"btn btn-primary w-md waves-effect waves-light mt-5 mb-4\" type=\"submit\">Se connecter</button>\n                      </div>\n\n                      <!-- <div class=\"mt-4 text-center\">\n                        <a routerLink=\"/account/reset-password\" class=\"text-muted\"><i class=\"mdi mdi-lock mr-1\"></i>\n                          Forgot\n                          your\n                          password?</a>\n                      </div> -->\n                    </form>\n                  </div>\n\n                  <div class=\"mt-5 text-center mt-5\">\n                    <p>© 2020 CERAMIC. Creer <i class=\"mdi mdi-heart text-danger\"></i>par Dassi Idriss</p>\n                  </div>\n                </div>\n\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div class=\"col-lg-8\">\n        <div class=\"authentication-bg\">\n          <div class=\"bg-overlay\"></div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n<!-- end page -->\n"]}